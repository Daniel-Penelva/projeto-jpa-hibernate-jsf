Link do Projeto:
http://localhost:8080/projeto-jpa-hibernate-jsf/index.jsf
http://localhost:8080/projeto-jpa-hibernate-jsf/primeirapagina.jsf

JSF é um MVC (MODEL-VIEW-CONTROLLER)



                             CONTROLLER            VIEW                                MODEL
                          
 CLIENTES -------------->  (Manager Beans)  +  (Páginas JSF) --------------> (entidades e regras de negócio)
          <-------------   (Faces Servlet)       (XHTML)     <-------------

O Controller intercepta os dados da tela que é jogado no Model. Ele também buscas os dados que estão no Model que é jogado para a View (tela).


Principais Componentes do JSF - SITE: https://www.tutorialspoint.com/jsf/index.htm

ShowCase Primefaces - SITE: https://www.primefaces.org/showcase/index.xhtml?jfwid=1aeba

Site oficial javaserverfaces - SITE: https://javaee.github.io/javaserverfaces-spec/

Bibliotecas de terceiros que trabalham com JSF - SITE: http://icefaces-showcase.icesoft.org/showcase.jsf
                                                 SITE: http://showcase.richfaces.org/


< Aula 24.11 - Ensina a configurar o ambiente e a criar o primeiro projeto jsf >
< Aula 24.17 - Ensina a corrigir erros de biblioteca e de java compiler (em relação ao jdk) >

O projeto Maven criado talvez não apareça para o servidor tomcat, o que signfica que o seu projeto não é um projeto web. Logo,temos que 
tornar esse projeto como web. E como fazer isso?

Clica no projeto e com o botão direito do mouse > properties > Projects Facets > Clica em "Convert to faceted form..." > Habilitar 'Dynamic Web Module', 'Javascript, 'JavaServer Faces' e 'JPA' > apply
Clica no projeto e com o botão direito do mouse > properties > Projects Facets > na aba 'Runtimes' define o tomcat que vai ser utilizado > apply
OBS. Se aparecer um "x em vermelho" clica nesse x e em 'JPA implemention' escolhe o type 'Disable Library Configuration' > next > marca o 'Generate web.xml deployment descriptor' > next > ok

OBS. No eclipse a aba 'Markers' foi mostrado erro de java compiler, ou seja, era um erro de jdk que não estava compativel com o projeto. No caso, alterei 
para o JDK que estou usando nos projetos.

------------------------------------------------------------------------

Entendendo o ManagedBean JSF

    Front-end            ------------->  Back-end
   (Página JSF - XHTML)  <-------------  (ManagedBean - Controlador)
   

O JSF terá a página de view (tela) que vai ser criada com um conjunto de tags especiais que vai ser comunicar com o servlet.
 
Vai ser preciso criar os managedbean que é um objeto controlado pelo JSF que por conseqüência vai saber como se comunicar 
com o Servlet e com as tags especiais vinda da tela, ou seja, o managedbean ao ser criado vai ser o responsável por controlar
a página. Lembrando que ele vai ser o back-end  que são os eventos da página (por exemplo, um evento de cadastro). 
Portanto, primeiro lá no Servlet vai ter a anotação “@Controller” onde vai ser possível fazer a instância do objeto que vai
cumprir com o papel de intermediador do managedbean e com o framework Spring.

Vale ressaltar, que a primeiro momento ele vai trabahar com o JSF, logo ele usará a anotação “@ManagedBean” para 
capturar os dados da tela no momento que o usuário executar o botão, esses dados referente ao usuário vão ser capturados 
pelo servlet e vai passar para o seu “@ManagedBean”, logo todos os dados que estavam na tela vão ser armazenados num objeto
da entidade (camada model), onde vai ser setado por ele todos os dados. 

OBS. No arquivo web.xml na pasta WEB-INF, a tag servlet-class é onde está a classe principal do funcionamento do JSF.
OBS. E a tag url-pattern é onde define os mapeamentos da url(s).

Ao criar a página XHTML vai ser preciso adicionar a anotação do JSF na página. E vai ser usado como referencia a letra h 
para o namespace. EX: xmlns:h="http://java.sun.com/jsf/html". 
Esse xml namespace vai ser puxado do próprio framework onde estão as bibliotecas (dependencias) baixadas no Maven do seu projeto.

Link do Projeto:
http://localhost:8080/projeto-jpa-hibernate-jsf/
http://localhost:8080/projeto-jpa-hibernate-jsf/index.jsf

----------------------------------------------

Escopos do Maneged Beans

Quando referenciamos um maneged bean via EL, o framework do JSF instanciará um objeto de classe do manede bean, o 
recuperará uma instância existente. Todas as instâncias possuem um tempo de vida, que é definido dependendo do escopo
usado no maneged bean.

Os escopos de maneged beans JSF podem ser definidos através de anotações do pacote javax.faces.bean.

Objetivo: Define comportamentos para telas e sistemas e cada escopo resolve um tipo de problema e cada um tem sua 
função específica.

-----------------------------------------------

Principais Escopos:

@NoneScoped
O bean será instanciado a cada vez que for referenciado.

@RequestScope (padrão)
Tem vida curta, começando quando é referenciado em uma única requisição HTTP e terminando quando a resposta é 
enviada de volta ao cliente.

@ViewScope 
A instância permanece ativa até que o usário navegue para uma próxima página.

@SessionScoped
Mantém a instância durante diversas requisições e até mesmo navegações entre páginas, até que a sessão do 
usuário seja invalidada ou o tempo limite é atingido. Cada usuário possui uma sessão de navegação, portanto, os 
objetos não são compartilhados entre os usuários.

@ApplicationScoped
Mantém a instância durante todo o tempo de execução da aplicação. É um escopo que compartilha os objetos para 
todos os usuários do sistema.

---------------------------------

Bom saber sobre Request Scoped: 
Em relação ao Request Scoped, ao clicar no botão 'adicionar nome', ele chama uma requisição, no caso, o método 
addNome e adiciona o nome na lista e quando o servidor dá a resposta para o navegador o bean Pessoa (pessoaBean) 
que estava na memória morre (portanto, ao gerar uma requisição ele processo o maneged bean, devolve a resposta, e morre), 
ou seja, tudo que estiver dentro dele vai morrer também, no caso, o usuário adicionado a lista. Por esse motivo que
não é possível usar o request Scoped numa lista já que sempre que for adicionado um usuário ele morre e não vai ser 
possível adicionar outro usuário. Portanto, o Request Scoped só é recomendado usar num cadastro, ou seja, capturou
os dados da tela de cadastro, salvou no banco de dados e por fim morreu.

---------------------------------

Bom saber sobre View Scoped: 
Enquanto estiver com a tela 'primeirapagina.xhtml' aberta, independente do que estiver na tela (exemplo um formulario de cadastro)
o maneged bean vai manter esse estado de ativo, ou seja, vai continuar mantendo os dados na tela. Portanto, o que 
vai fazendo na tela vai guardando os dados.
Logo, ele só morre, se por exemplo, redirecionar a tela para outra página.

---------------------------------

Bom saber sobre Session Scoped: 
Usado para usuários logados. A sessão é mantida enquanto o navegador continuar aberto pelo usuário.
Acesse o link do seu projeto cadastre alguns nomes e depois submeta esse mesmo link em outra aba do seu navegador, 
você verá que manterá os nomes ainda cadastrados.

---------------------------------

Bom saber sobre Application Scoped: 
Significa que todos os usuário irão poder compartilhar esses dados, até os que não teriam permissão de visualizar a 
informação dos dados. É compartilhado em todas as aplicações.

---------------------------------

Managed Bean: É qualquer bean cuja vida é gerenciada pelo Faces.

Backing Bean: Como diz o nome, é um “Bean por detrás”, um “Bean que dá suporte”. Ou seja, é o Bean que está por trás da funcionalidade
de uma página, cuidando dos seus componentes, do estado da página, da navegação, etc. Costuma ser intimamente associado a 
alguma página.
Todo backing-bean também é um managed bean, mas nem todo managed bean é um backing-bean. Pode ser um objeto de negócio, por exemplo.

Backing Bean (são maneged bean) trabalha com os componentes jsf junto com o objeto, ou seja, todos os componentes xhtml 
que estiver terá a respectiva classe do java. É possivel trabalhar com os componentes no back-end. Mas essa pratica não 
é recomendada.

------------------------------

A navegação explicita é feito dentro do arquivo faces-config.xml

------------------------------

Vamos criar um JPUtil para instanciar e criar um EntityManager sempre que precisar se comunicar com o BD. Vamos 
criar um padrão Singleton para instanciar uma única vez.

------------------------------

xmlns:f="http://java.sun.com/jsf/core"

O core da suporte para vários elementos html do jsf

-------------------------------

PainelGrid é um painel que se torna uma tabela para montar formulários e organizar os componentes em tela.

-------------------------------

Sobre o selectOneMenu = comboBox - para selecionar APENAS UMA OPÇÃO
 -> selectItem = adiciona itens 
 -> itemValue = é o valor que vai ser gravado no banco de dados
 -> itemLabel = é o valor que irá aparecer na tela.
 -> required="true"(define como um valor obrigatório - caso não seja marcado não irá salvar no BD)
 -> noSelectionOption = não seleciona o item, ou seja, vai ter que escolher Masculino ou Feminino. 
 
 -------------------------------

Sobre o selectManyMenu = comboBox - para selecionar MAIS DE UMA OPÇÃO

Vale ressaltar que como são vários itens que podem ser marcados, logo o atributo tem que ser do tipo lista.

-------------------------------

Filtro de autenticação (Padrão Open Session)

  (Open session View - abre uma sessão de conexão)
                       |
  (TELA login)         |       
    NAVEGADOR ---------|-------> SERVIDOR
              <--------|--------    
                       |                       
                      FILTER    
             (Intercepta a requisição)
             
Vai ser criado uma classe que vai controlar todas as páginas acessadas. Para poder verificar se o usuário está 
logado ou não. Se não estiver logado vai fazer um redirecionamento para a tela de login.
Vai ser criado a classe 'FilterAutenticacao' e vamos usar a seguinte anotação:

@WebFilter(urlPatterns = {"/*"})
Class FilterAutenticacao implements Filter{...}

OBS. Vai interceptar todas as páginas, ou seja, todas as urls.
OBS. Vai ser implementado o Filter do pacote servlet.

----------------------------------------------------

O atributo 'rendered' permite ocultar ou mostrar componentes ou parte da tela de acordo com o perfil do usuário.
Para fazer esse tipo de funcionalidade vai ser criado um método do tipo boolean e vai receber como 
parametro o tipo de acesso que vai ser permitido. Vai ser recuperado o usuario logado na sessão.

-----------------------------------------------------

BOTÃO EDITAR
No tutorial “PRIMEFACES: DADOS COM DATATABLE”, criamos com o componente p:dataTable, uma tabela para listar os dados cadastrados. 
Dentro do dataTable definimos a estrutura de colunas.

Em termos de linhas de código a estrutura de um p:column é simples, incluindo um atributo que define o cabeçalho, da coluna, 
headerText. E neste caso, como queremos implementar apenas um botão, poderemos recorrer ao JavaServer Faces. Caso, se tratasse 
de uma implementação sofisticada, e, onde o design fizesse a diferença, certamente o PrimeFaces seria a nossa escolha.

Assim, dentro do contexto do dataTable utilizaremos o h:commandLink, componente do JSF que renderiza um elemento HTML – HyperText 
Markup Language (Linguagem de Marcação de Hipertexto), do tipo âncora.

Com o componente f:setPropertyActionListener colocaremos o objeto em edição na tela. Esta tag ficará “escutando” o componente 
que do seu lado, tem como valor uma propriedade bean definida.

E ainda, o f:setPropertyActionListener implementará o value, o responsável por pegar o objeto selecionado pelo usuário, ao 
passo que o target é o objeto do ManagedBean que receberá o objeto pessoa a ser colocado em edição.

BOTÃO EXCLUIR
Os princípios aplicados no botão “Editar” são os mesmos que aplicaremos no botão de “Excluir”, obviamente mudando apenas a 
função do link. Neste caso o “Excluir” deverá chamar o método remover(). Assim, no h:commandLink o atributo action, deverá 
invocar o método.

EM POUCAS PALAVRAS
Desse modo, quando o usuário clicar em “Excluir”, tal como acontece quando o objeto é colocado em edição, o objeto em questão 
é passado para o ManagedBean, que controla a página. E só então o método remover() será chamado.

--------------------------------------------------

Os atributos locale e timeZone Vão fazer com que pegue a data real:
<f:convertDateTime pattern="dd/MM/yyyy" locale="pt_BR" timeZone="GMT-03:00"/>

OBS. converterMessage="Data Errada"
É um validador de data para caso do usuário entrar com a data errada.

---------------------------------------------------

Consulta CEP (Web Service CEP - link: https://viacep.com.br/ ou https://viacep.com.br/ws/01001000/json/)

Com o JSF é diferente do JSP que usava um JQuery que retornava esse json e preenchia na tela.

Passos com o JSF:
1 - Preencher na tela com o JSF

2 - Fazer um evento de perda de foco (quando é carregado para vc automaticamente os dados do CEP. No caso, é um  
                                      método executado que carrega o CEP e que fica do lado do manegead bean)
                                      
3 - Mandar para o lado do back-end no manegead bean

4 - Interceptar

5 - Fazer a requisição pelo web service

6 - Setar para os atributos do managead bean do objeto q o managead bean controla 

7 - Mandar para a tela

Parte 1
Primeiro vamos colocar um campo de CEP na tela e fazer a ativaçao na hora que se perde o foco ao digitar o cep que
vai ser executado um método de pesquisa de cep do lado do manegead bean, enviando o cep que foi digitado pelo usuário.

<f:ajax event="blur" execute="@this" render="" listener="#{pessoaBean.pesquisaCep}"/>

Propriedades:

 -> event = é um evento de uma ação (clique de botão, entrada de foco ou mudança de valor etc). No caso, a perda de foco
 no JSF é blur. Na perda de foco vai ser executado o ajax.
 
 -> execute = Executa o componente InputText, ou seja, o @this seria o próprio componente que vai enviar os dados para o lado 
 do managead bean.
 
 -> render = Depois de consultar para o lado do managead bean, ou seja, depois de consultar o cep, irá setar os dados pelo objeto que 
 vai mostrar os campos em tela carregados do CEP. Ou seja, recarregar o objeto na tela.
 
 -> listener = é o método que vai ser executado que vai consultar o cep. O listener vai ser executado depois de perder o foco.

------------------------------------------------
Para deslogar o usuário basta acessar o mesmo getSessionMap e fazer um remove, depois fazer um invalidate da sessão.

------------------------------------------------

Nessa parte 4 do combo dependentes, analisando: Na hora de selecionar o valor do Estado do combo, vai ser disparado um evento 
pelo lado do servidor que vai ser recuperado o valor (o código do Estado) do Estado. Vai ser feito isso através do ajax que vai
acionar esse evento de mudança ao lado do servidor e do managead bean, que vai capturar essa seleção de item (@This) e enviado 
ao lado do servidor. Essa execução vai ser executada por um método através do 'listener'. 
A propriedade 'immediate' é para deixar passar a fase de validação, ou seja, se tiver alguma fase de validação no formulário 
o ajax não irá conseguir fazer funcionar por debaixo dos pano, portanto, sempre que for usar o ajax, usa-se o immediate.

Vale ressaltar que o primeiro valor que está no combo é o 'Acre', e não podemos deixar esse valor como primeira opção, pois até
o momento ainda não existe uma ação feito pelo o usuário para definir o valor, logo para resolver esse problema vamos adicionar 
a tag 'selectItem' e a propriedade 'itemLabel' para definir um valor definido na tela. Vale ressaltar que não podemos deixar 
esse valor para que o usuário não selecione e que não salve no BD (não deixar disparar um evento), para isso vamos utilizar 
a propriedade 'noSelectionOption'.

Vamos criar um Coverter (um conversor) para usar nos selectOneMenu para poder enviar os dados de endereço. A função do converter
é o seguinte, quando os dados vem do servidor para a tela (tudo em String) e quando é submetido para salvar o formulário, os dados
são pegos e convertidos para objeto para ser setado no objeto pessoa e salvo no BD.

--------------------------------------------------

Upload de miniaturas na tela, vamos precisar de uma coluna para gravar a imagem original e uma coluna para gravar a miniatura
e de um campo para gravar a extensão (exemplo, jpg, png).

Vai ser usado a base 64 que pega os arquivos e transforma em texto.

Bom saber sobre a propriedade:

enctype="multipart/form-data" -> Significa que está fazendo um upload nesse formulário.


Entenda que existe o conceito de “Input” e “Output” para qualquer dos casos tratados, ou seja, tudo tem um destino e uma 
fonte. Um programa que precise ler algum dado de algum local (uma fonte) precisa de um InputStream ou um Reader, por outro 
lado um programa que precise escrever um dado em algum local (destino) precisa de um OutputStream ou um Writer.

Você verá muito essa palavra “Stream” que é um fluxo de dados, seja para leitura ou para escrita. Imagine um Stream como uma 
conexão com uma fonte ou destino de dados, onde esses dados podem ser passados via byte ou character. Por exemplo, um arquivo 
de texto pode representar um Stream, onde o seu programa irá ler esse Stream via byte ou character usando InputStream ou 
algum Reader.

Quando existe um dispositivo de entrada de dados ativo, para obter dados deste dispositivo é usada uma ação conhecida como 
read(). E para enviar um dado para um dispositivo de saída é utilizado o método write().

Reader
É uma classe abstrata sendo igual à InputStream, é voltada para a manipulação de caracteres. Nessa classe não é possível 
criar objetos diretos dela. Para criar objetos é necessário instanciar uma das subclasses concretas para ter o acesso à 
funcionalidade especificada por Reader. 

Writer
É uma classe abstrata que escreve stream de caracteres. Os únicos métodos que uma subclasse writer deve implementar são: 
write(char [], int, int), flush () e close ().

flush()
Quando alguma escrita é feita em um arquivo em disco, pode ser que este dado ainda não tenha sido de fato escrito no disco, 
esteja em algum local na memória esperando o momento exato para ser gravado. O método flush() força que este dado seja 
escrito imediamente no disco ou em qualquer outro local que você esteja tentando gravar.

close()
O método close() deve ser chamado para fechar a escrita do arquivo e evitar que este fique aberto. Como várias exeções podem 
ocorrer durante a escrita do mesmo, e o fechamento do arquivo deve ser sempre garantido, o ideal é que o close() fique no 
bloco finally de uma try-catch.

Para trabalhar com entrada e saída de dados são utilizada as classes que estão dentro do java.io. Essas classes oferecem 
algumas funcionalidades como:

  -> Manipulação de entrada e saída de bytes – transferência de dados binários;
  -> Manipulação de entrada e saída de caracteres – transferência de textos;
  -> Buffers - melhoram a eficiência da velocidade de leitura e escrita;
  ->Conversão de formatos – texto e formato interno de dados binários.

As entradas e saídas de dados são manipuladas como sequência de bytes, através das classes InputStream e OutputStream e as 
classes dependentes.

Classe InputStream
É uma classe abstrata que oferece a funcionalidade básica para a leitura de um byte ou de uma sequência de bytes a partir 
de alguma fonte.

Vimos então que o InputStream faz parte da leitura de dados, ou seja, está conectado a alguma fonte de dados: arquivo, 
conexão de internet, vídeo e etc. O InputStream nos possibilita ler esse Stream em byte, um byte por vez. Acontece que se 
olharmos na classe InputStream veremos que ela é abstrata e nós somos obrigados a usar alguma outra classe que a implemente 
para fazer uso dos seus recursos. Então as principais subclasses de InputStream são:
  
  -> ByteArrayInputStream – Valores são originários de um arranjo de bytes;
  -> FileInputStream – Bytes com originalidade de um arquivo.
  -> FilterInputStream – Filtra os dados de um InputStream.
  -> BufferedInputStream – Faz a leitura de grandes volumes de bytes que armazena em um buffer interno.
  -> DataInputStream – Permite a leitura de representações binárias dos tipos primitivos de Java.
  -> ObjectInputStream – Oferece o método readObject para a leitura de objetos que foram serializados para um ObjectOutputStream.
  -> PipedInputStream – Faz a leitura de um pipe de bytes cuja origem está associada a um objeto PipedOutputStream

OBS. o FileInputStream nos permite ler um arquivo qualquer e retornar os dados em byte. Temos ainda o BufferedInputStream 
que diferente do FileInputStream, que lê byte a byte, este lê um bloco inteiro de uma só vez, agilizando o processamento de 
leitura no disco.

Um exemplo prático: Se o seu arquivo possui 32768 bytes, para que um FileInputStream possa ler ele por completo, ele precisará 
fazer 32768 chamadas ao Sistema Operacional. Com um BufferedInputStream você precisará de apenas quadro chamadas, isso porque 
o BufferedInputStream armazena 8192 bytes em um buffer e os utiliza quando precisa. Resumindo, você deve usar o BufferedInputStream 
como um wrapper para o FileInputStream quando desejar ganhar mais velocidade.


OutputStream

É uma classe abstrata que transfere sequencialmente os bytes para algum destino. Os métodos write(), tem a função de escrever 
em forma de bytes para o destino onde vai enviar.

o processo de escrita neste Stream, ou seja, o OutputStream é capaz de enviar dados a um determinado Stream, ao contrário do 
InputStream que faz a leitura do mesmo. Lembre-se que ao falarmos de “Stream” não estamos tratando especificamente de texto 
mas qualquer tipo de dado, usamos a leitura de texto apenas para facilitar o entendimento, mas outros métodos poderiam ser 
utilizados. Assim como o InputStream, o OutputStream é uma classe Abstrata que precisa de uma implementação concreta.


-----------------------------------------------------------

Para fazer download da imagem vamos utilizar um 'actionListener' que executa e que vai para o servidor e volta sem 
precisar redirecionar, diferente do action que redireciona.

É preciso passar um parametro (param) para capturar o id do usuario que estamos baixando o arquivo. Esse parametro que 
é o código do usuario vai ser passado no método download para resgatar essa imagem.
Exemplificando: <f:param name="fileDownloadId" value="#{p.id}"/>

Dentro do método download vamos utilizar um Map porque dentro do jsf é possível saber tudo que vem da requisição.
Vamos carregar o id do parametro por meio do get() para recuperar a imagem da pessoa.

Vai ser preciso recuperar o objeto pessoa por inteiro, logo vamos ter que criar um método no dao para consultar a pessoa.
 
 
-----------------------------------------------------------

Pool de conexão com c3pO com JPA
Mas o que faz o pool? Basicamente, ele mantém certo número de conexões abertas com o banco de dados. 
Quando o cliente java abre uma conexão usando o pool, ao invés de abrir uma nova conexão com o banco usando o driver
JDBC, este simplesmente pega uma das conexões que ele já mantinha aberta com o banco e a marca como alocada para aquele
cliente.


           Porta           Vários Clientes
      
      Pool de conexões  <--------------------- 1
       com 5 sessões    <--------------------- 2
            |           <--------------------- 3
            |           <--------------------- 4
            |                                  .
            v                                  .
      Banco de Dados                           .
                                               n
                                               
 Características:
  - Melhora a velocidade do sistema
  - Evita conexões presas
  - Monitora conexões não usadas
  - Melhora a perfomance
  - Gerência transações de banco
  
Para saber se as configurações estão rodando corretamente no banco de dados:

Vai até o seu banco de dados, seleciona o database do projeto vai em: tools > server status 

-----------------------------------------------------------

Bean Validation 

A API de bean validation fornece uma facilidade para validar objetos em diferentes camadas da aplicação.
JavaServer Faces (JSF) integra com esta tecnologia para validar objetos preenchidos pelas páginas que criamos.

A vantagem de usar bean validation é que as restrições ficam inseridas nas classes de modelo, e não em páginas XHTML, 
por isso podem ser usadas por outras camadas camadas da aplicação.

As restrições de bean validation são em forma de anotações que serão trabalhadas em cima dos atributos da nossa entidade.

O Bean Validation padroniza como definir e declarar restrições de nível de modelo de domínio. Você pode, por exemplo, 
expressar que uma propriedade nunca deve ser nula, que o saldo da conta deve ser estritamente positivo, etc.

Essas restrições de modelo de domínio são declaradas no próprio bean anotando suas propriedades. O Bean Validation 
pode então lê-los e verificar se há violações de restrição. O mecanismo de validação pode ser executado em diferentes
camadas em seu aplicativo sem ter que duplicar nenhuma dessas regras (camada de apresentação, camada de acesso a dados). Seguindo o princípio DRY, Bean

Validation e sua implementação de referência, o Hibernate Validator foi desenvolvido para essa finalidade.

A integração entre o Hibernate e o Bean Validation funciona em dois níveis.
  
  -> Primeiro, é capaz de verificar instâncias na memória de uma classe para violações de restrição. 
  
  -> Segundo, ele pode aplicar as restrições ao metamodelo do Hibernate e incorporá-las ao esquema do banco de dados gerado. 
     
Cada anotação de restrição é associada a uma implementação de validador responsável por verificar a restrição na 
instância da entidade. Um validador também pode (opcionalmente) aplicar a restrição ao metamodelo do Hibernate, 
permitindo que o Hibernate gere DDL que expressa a restrição. Com o ouvinte de eventos apropriado, você pode executar 
a operação de verificação em inserções, atualizações e exclusões feitas pelo Hibernate. 
     
Ao verificar instâncias em tempo de execução, o Hibernate Validator retorna informações sobre violações de restrições 
em um conjunto de ConstraintViolations.
 
 ---------------------------------------------
 actionListener não faz o redirecionamento e ele faz a ação antes do action. Lembrando que o action você chama e pode fazer 
 o redirecionamento para outra página.
